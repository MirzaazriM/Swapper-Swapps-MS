<?php

namespace Core\Handler;

class ESHandler
{
    private $configuration;
    private $index;
    
    /**
     * ESHandler constructor. Passes configuration.
     * @param array $configuration
     */
    public function __construct(array $configuration)
    {
        $this->configuration = $configuration;
        $this->index = '/swappscached/';
    }
    
    
    /**
     * Manipulate data.
     * - create
     * - update
     * 
     * @param $id
     * @param $data
     * @return bool
     */
    public function manipulateData($swapId, $data): bool
    {
        
        // todo
        $json = json_encode(
            $data
            );
                
                
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->configuration['elastic_search_url'].$this->index."_doc/".$swapId."?pretty");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
        $headers = array();
        $headers[] = "Content-Type: application/json";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $result = curl_exec($ch);
        curl_close ($ch);
        
        //die($result);
                
        return $result;
        
    }
    
    
    /**
     * Gets data by id.
     * 
     * @param $id
     * @return array
     */
    public function getDataById($swapId): array
    {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->configuration['elastic_search_url'].$this->index."_doc/".$swapId);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $result = curl_exec($ch);
        curl_close ($ch);
        
        $result = json_decode($result, true);
                
        if(isset($result['_source'])){
            return $result['_source'];
        }
                
        return [];
    }
    
    
    /**
     * Get data by ids.
     * 
     * @param array $ids
     * @return array
     */
    public function getDataByIds(array $ids): array
    {
        // decode feed
        $json = json_encode(
                [
                    "query"=>[
                        "ids"=>[
                            "values" => $ids
                        ]
                    ]
                ]
            );
        
        
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->configuration['elastic_search_url'].$this->index."_search/");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        $headers = array();
        $headers[] = "Content-Type: application/json";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $result = curl_exec($ch);
        curl_close ($ch);
        
        $result = json_decode($result, true);
                
        if(isset($result['hits']['hits'])){
            return $result['hits']['hits'];
        }
                
        return [];
    }
    
    
    /**
     * Search swapps by name
     * 
     * @param $name
     */
    public function searchSwaps(array $tags, int $limit)
    {
        $matches = [];
        foreach ($tags as $tag){
            array_push($matches,
                [
                    "match"=>["tags.name"=>$tag]
                ]
                );
        }
                
        $searchRequest = [
            "size" => $limit,
            "query" => [
                "bool" => [
                    "filter"=>$matches
                ]
            ],
            "sort" => [
                "date" => [
                    "order" => "desc"
                ]
            ]
//             "from" => (int)$from, 
        ];
            
        
        $json = json_encode($searchRequest);
        //die($json);
        
//         $json = '{
//     "query": {
//         "match_all" : {}
//     }}';
        
//         $json = '{
// 	"query": {
// 		"bool": {
// 			"should":[{
//                 "term":{"tags":{"name":"New"}}
//             }]
// 		}
// 	},
// 	"sort": {
// 		"date": {
// 			"order": "desc"
// 		}
// 	},
// 	"size": 100
// }';

//         $json = '{
// 	"query": {
// 		"bool": {
// 			"filter": [{
// 				"match": {
// 					"tags.name": "hx"
// 				}
// 			}]
// 		}
// 	}
// }';
        
        
        //die($json);
        
        //die($json);
        
        // curl item
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->configuration['elastic_search_url'].$this->index."_search"); // ES Endpoint
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        $headers = array();
        $headers[] = "Content-Type: application/json";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $result = curl_exec($ch);
        curl_close ($ch);
        
        //die($result);
        
        $result = json_decode($result, true);
                
        if(isset($result['hits']['hits'])){
            return $result['hits']['hits'];
        }
        
        return [];
    }
    
    
    /**
     * Remove swap cached data by id
     *
     * @param int $id
     * @return bool
     */
    public function deleteDataById(int $id):bool
    {           
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->configuration['elastic_search_url'].$this->index."_doc/".$id."?pretty");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
        $headers = array();
        $headers[] = "Content-Type: application/json";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $result = curl_exec($ch);
        curl_close ($ch);
        
        return $result;
    }
    
    
}

